/***
 * Main
 * Main TCP chat Client class 
 * Date: 17/11/20
 * Authors: 
 */
package client;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.List;


import javax.swing.*;


/**
 * The class Main.
 * The interface was built with IntelliJ Swing GUI Designer.
 * You may not be able to compile this GUI without IntelliJ
 */
public class Main {


    private JButton connexionButton;
    private JTextField adresse;
    private JTextField port;
    private JTextField messageEnvoye;
    private JButton envoyerButton;
    private JTextArea chat;
    private JPanel root;
    private JLabel infos;

    private Socket socket;
    private EnvoiThread e;
    private ReceptionThread r;

    private List<String> messages;

    /**
     * Instantiates a new Main.
     */
    public Main() {

        this.messages = new ArrayList<>();
    }

    /**
     * Ajouter message.
     *
     * @param message the message
     */
    public synchronized void ajouterMessage(String message) {
        messages.add(message);
        chat.append(message);
    }

    /**
     * The entry point of application.
     *
     * @param args the input arguments
     */
    public static void main(String[] args) {

        Main myMain = new Main();

        myMain.connexionButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                String addresse = myMain.adresse.getText();
                String port = myMain.port.getText();


                try {
                    // creation socket ==> connexion
                    myMain.socket = new Socket(myMain.adresse.getText(), new Integer(myMain.port.getText()));
                    myMain.e = new EnvoiThread(myMain.socket, myMain);
                    myMain.r = new ReceptionThread(myMain.socket, myMain);
                    myMain.e.start();
                    myMain.r.start();

                    myMain.infos.setText("Connexion effectuée");

                } catch (UnknownHostException ex) {
                    System.err.println("Don't know about host:" + args[0]);
                    System.exit(1);
                    myMain.infos.setText("Hôte introuvable");

                } catch (IOException ex) {
                    System.err.println("Couldn't get I/O for "
                            + "the connection to:" + args[0]);
                    myMain.infos.setText("Problème de connexion");
                    System.exit(1);
                }


                //   socOut.close();
                //   socIn.close();
                //   stdIn.close();
                //   echoSocket.close();
            }
        });

        myMain.envoyerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                String message = myMain.messageEnvoye.getText().trim();

                if (!message.equals("")) {
                    myMain.e.envoyerMessage(message);
                }

            }
        });

        JFrame frame = new JFrame("Main");
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent windowEvent) {
                try {
                    myMain.e.interrupt();
                    myMain.r.stopThread();
                    myMain.socket.close();

                } catch (Exception e) {
                    e.printStackTrace();
                }
                System.exit(0);
            }
        });
        frame.setContentPane(myMain.root);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new GridLayoutManager(4, 5, new Insets(0, 0, 0, 0), -1, -1));
        root.setPreferredSize(new Dimension(640, 480));
        connexionButton = new JButton();
        connexionButton.setText("Connexion");
        root.add(connexionButton, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        adresse = new JTextField();
        root.add(adresse, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        port = new JTextField();
        root.add(port, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Adresse");
        root.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Port");
        root.add(label2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        messageEnvoye = new JTextField();
        root.add(messageEnvoye, new GridConstraints(3, 0, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        envoyerButton = new JButton();
        envoyerButton.setText("Envoyer");
        root.add(envoyerButton, new GridConstraints(3, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        root.add(scrollPane1, new GridConstraints(2, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        chat = new JTextArea();
        chat.setEditable(false);
        chat.setLineWrap(true);
        scrollPane1.setViewportView(chat);
        infos = new JLabel();
        infos.setText("");
        root.add(infos, new GridConstraints(1, 0, 1, 5, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

}


